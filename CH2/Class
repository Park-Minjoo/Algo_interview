#C++
//선언
class Rectangle {
    int width, height;
public:
    Rectangle(int, int);

    int area();
};

//구현
Rectangle::Rectangle(int x, int y) {
    width = x;
    height = y;
}

int Rectangle::area() {
    return width * height;
}

Rectangle rect(3,4);
std::cout << rect.area() << std::endl;

//선언부와 구현부
//헤더 파일과 소스 파일
//컴파일 속도 빨라짐.

#JAVA
class Rectangle {
    int width;
    int height;

    public Rectangle(int width, int height) {
        this.width = width;
        this.height = height;
    }

    public int area() {
        return this.width * this.height;
    }
}

Rectangle rect = new Rectangle(3,4);
System.out.println(rect.area());

// 자바는 모든 것이 클래스 !

#Python
from dataclasses import dataclass

@dataclass
class Rectangle:
    width: int
    height: int
    def area(self):
        return self.width * self.height

rect = Rectangle(3,4)
println(rect.area())

// dataclass decoration

#Go
type Geometry interface {
    area() int
}

type Rectangle struct {
    width int
    height int
}

func (r *Rectangle) area() int {
    return r.write * r.height
}

var rect Geometry = &Rectangle{3,4}
fmt.Println(rect.area())

//no class, no generic
// do Struct
// area() 함수 --> polymorphism 다형성 지원
// 다형성; 서로 다른 유형의 개체에 단일 인터페이스 제공.
// Geometry 라는 단일 인터페이스는 어떤 유형이냐에 따라 다양한 방법으로 구현

#TypeScript
class Rectangle {
    width: number;
    height: number;

    constructor(width: number, height: number) {
        this.width = width;
        this.height = height;
    }

    area(): number {
        return this.width * this.height;
    }
}

const rect = new Rectangle(3,4);
console.log(rect.area());

//현존하는 가장 우아한 언어
